#!/usr/bin/perl -w

use strict;
use Cwd qw(cwd);
use FindBin;
use lib $FindBin::Bin;
use hyunlib qw(forkExecWait);
use wGetOptions qw(wGetOptions wpod2usage);

my $indexf = "";
my $directory = "";
my $targetName = "";
my $targetExpr = "";
my $targetGeno = "";
my $outPrefix = "";
my $prediXcanPath = "PrediXcan.py";
my $rscriptPath = "Rscript";
my $sqlite3Path = "sqlite3";
my $keep = "F";
my $parallel = 1;

wGetOptions(
    "-Smartly-Weighted Average across Multiple Tissues\nSee https://github.com/aeyliu/SWAM for more details",
    "--Required Options",
    "index=s",[\$indexf,"Index file containing the list of tissue-specific training models. Each line should have [TISSUE_NAME] [Path to PredictDB-formatted file"],
    "directory=s",[\$directory,"Directory containing all prediction models to be used  by SWAM. If index file is not specified, will be generated from directory"],
    "name=s",[\$targetName, "Name of the target tissue. Must be included in the index file"],
    "expr=s",[\$targetExpr, "Measured expression data for the target tissue (in PrediXcan format). First line has sample IDs, and from the second line [GENE_NAME] [EXPR_FOR_SAMPLE_1] [EXPR_FOR_SAMPLE_2] ..."],
    "geno=s",[\$targetGeno, "Genotype files in gzipped dosage format in PrediXcan format"],
    "out=s",[\$outPrefix, "Prefix of output files"],
    "--Additional Options",
    "num-cpu=s",[\$parallel,"Assign number of CPUs for parallelization"],
    "PrediXcan-path=s",[\$prediXcanPath,"Path to PrediXcan software tool"],
    "Rscript-path=s",[\$rscriptPath,"Path to Rscript tool"],
    "sqlite3-path=s",[\$sqlite3Path,"Path to sqlite3 tool"],
    "keep-files=s",[\$keep,"Option to keep intermediate files"],
    ) || wpod2usage(2);


unless ( $targetName && $targetExpr && $targetGeno && $outPrefix ) {
    print STDERR "ERROR: Missing required arguments. Please see the usage below\n";
    wpod2usage();
}


#get the prefix/directory 

my $outDir = $outPrefix;
my $wd = cwd;

unless($outDir =~ /^\// ) {
    $outDir = "$wd/$outDir"; #set current directory if filepath is not specified
}
$outDir =~ s/\/$// if ( $outDir =~ /\/$/ ); # strip out trailing slash

unless($directory =~ /^\// ) {
    $directory = "$wd/$directory"; #set current directory if filepath is not specified    
}
$directory =~ s/\/$// if ( $directory =~ /\/$/ ); # strip out trailing slash

unless($targetGeno =~ /^\// ) {
    $targetGeno = "$wd/$targetGeno"; #set current directory if filepath is not specified    
}
$targetGeno =~ s/\/$// if ( $targetGeno =~ /\/$/ ); # strip out trailing slash

unless($targetExpr =~ /^\// ) {
    $targetExpr = "$wd/$targetExpr"; #set current directory if filepath is not specified    
}

unless( -d $outDir ) {
    &forkExecWait("mkdir $outDir");
}
unless( -d "$outDir/cov" ) {
    &forkExecWait("mkdir $outDir/cov"); #covariance matrices (used for metaXcan)
}
unless( -d "$outDir/intermediate" ) {
    &forkExecWait("mkdir $outDir/intermediate"); #single-tissue predictions
}
unless( -d "$outDir/model" ) {
    &forkExecWait("mkdir $outDir/model"); #SWAM model
}

unless( -d "$outDir/info" ) {
    &forkExecWait("mkdir $outDir/info"); #single-tissue model information (extra and weights table)
}


#generate index file if file is not provided
my $size = -s $directory;
print "$size\n";
unless ( -s $indexf ) {
    if( -s $directory ) { #if index file is not specified, but directory is given, generate index file
        &forkExecWait("perl $FindBin::Bin/s01-generate-index.pl $directory $outDir");
	$indexf = "$outDir/index.txt";
    }
    unless ( -s $directory ) {

        die "ERROR: Index file $indexf and directory $directory both do not exist or empty";
    }
}

#call prediXcan from index file
&forkExecWait("awk \'{print \"--weights \"\$2\" --output_dir $outDir/intermediate/\"\$1\ }\' $indexf | xargs -I {} -P $parallel sh -c \"$prediXcanPath --predict --dosages $targetGeno --samples $targetGeno/samples.txt {} --linear\" "); 

#extract information about prediction models and save for R to read
#extract weights
&forkExecWait("awk '{print \$2\"* \\\\\\047SELECT * from weights\\\\\\047 > $outDir/info/\"\$1\".weights.dump \"}' $indexf | xargs -I {} sh -c \"$sqlite3Path {} \" ");

#extract extra information
&forkExecWait("awk '{print \$2\"* \\\\\\047SELECT * from extra\\\\\\047 > $outDir/info/\"\$1\".extra.dump \"}' $indexf | xargs -I {} sh -c \"$sqlite3Path {} \" ");


#R calculates the weights based on the measured expression and predicted expression levels

&forkExecWait("Rscript $FindBin::Bin/s03-calc-weights.R $targetExpr $outDir/intermediate/ $targetName $outDir/info/ $outDir/index.txt $outDir/model/swam.weights.txt");


&forkExecWait("perl $FindBin::Bin/s04a-generate-tables.pl $outDir/model/swam.weights.txt $outDir/index.txt $outDir/info $FindBin::Bin/ensg.map.txt $outDir/model/swam.cv");
&forkExecWait("perl $FindBin::Bin/s04b-generate-db-script.pl $outDir/model/swam.cv $outDir/model/swam.cv.weights $FindBin::Bin/sql-template.txt");
&forkExecWait("$sqlite3Path -init $outDir/model/swam.cv.weights.sql $outDir/model/swam.cv.weights.db \"\"");
&forkExecWait("$sqlite3Path $outDir/model/swam.cv.weights.db* \'SELECT * from weights\' > $outDir/model/swam.cv.weights.dump");

&forkExecWait("seq 1 22 | xargs -I {} -P 22 bash -c \"perl $FindBin::Bin/s05-cal-cov.pl $outDir/model/swam.cv.weights.dump $targetGeno {} $outDir/cov/cov{}.txt\" ");
&forkExecWait("gzip -r $outDir/cov");
#cleanup files
unless($keep eq "T")
{
 &forkExecWait("rm -f -r $outDir/info");
 &forkExecWait("rm -f -r $outDir/intermediate");
 &forkExecWait("rm -f -r $outDir/model/swam.cv.extra.txt");
 &forkExecWait("rm -f -r $outDir/model/swam.cv.weights.dump");
 &forkExecWait("rm -f -r $outDir/model/swam.cv.weights.sql");
 &forkExecWait("rm -f -r $outDir/model/swam.cv.weights.txt");
 &forkExecWait("rm -f -r $outDir/model/swam.weights.txt");

}
